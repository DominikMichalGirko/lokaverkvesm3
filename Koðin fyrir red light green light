// Code for the ESP32
#include "WiFi.h" // Enables the ESP32 to connect to the local network (via WiFi)
#include "PubSubClient.h" // Connect and publish to the MQTT broker

// WiFi
const char* ssid = "TskoliVESM";                 // Your personal network SSID
const char* wifi_password = "Fallegurhestur";        // Your personal network password

// MQTT
const char* mqtt_server = "10.201.48.53";  // IP of the MQTT broker
const char* mqtt_username = "vesm14"; // MQTT username
const char* mqtt_password = "verksmidja3"; // MQTT password
const char* Light_topic = "home/VesmLight";
const char* clientID = "client_GreenRedVesm"; // MQTT client ID
const char* GameOn = "home/GameOnVesm";

//Your IFTTT webhook private address
const char* host = "maker.ifttt.com";
const char* apiKey = "bDS3qAHFngPLIlMqVJRMAA";
String your_dead = "Eliminated";


// Initialise the WiFi and MQTT Client objects
WiFiClient wifiClient;
// 1883 is the listener port for the Broker
PubSubClient client(mqtt_server, 1883, wifiClient); 


// Custom function to connet to the MQTT broker via WiFi
void connect_MQTT(){
  Serial.print("Connecting to ");
  Serial.println(ssid);

  // Connect to the WiFi
  WiFi.begin(ssid, wifi_password);

  // Wait until the connection has been confirmed before continuing
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Debugging - Output the IP Address of the ESP8266
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Connect to MQTT Broker
  // client.connect returns a boolean value to let us know if the connection was successful.
  // If the connection is failing, make sure you are using the correct MQTT Username and Password (Setup Earlier in the Instructable)
  if (client.connect(clientID,mqtt_username, mqtt_password)) {
    Serial.println("Connected to MQTT Broker!");
  }
  else {
    Serial.println("Connection to MQTT Broker failed...");
  }
}

int pirPin = 14;
int pirState = LOW; // variable to hold the PIR sensor state

int red = 4;
int green = 2;

void callback(char* Topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(Topic);
  Serial.print(". Message: ");
  String messageTemp;

  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();

  if (messageTemp == "Green") {
    Serial.println("GreenLight");
    digitalWrite(green,HIGH);
    digitalWrite(red,LOW);
  }
  else if (messageTemp == "Red") {
    Serial.println("redLight");
    digitalWrite(red, HIGH);
    digitalWrite(green,LOW);
    
    int motionDetected = digitalRead(pirPin);
    if(motionDetected == HIGH) {
      Serial.println("Motion detected");
      String hre = "hreyfing";
      if (client.connected() && client.publish(Light_topic, String(hre).c_str())) {
        Serial.println("hreyfing send");
        digitalWrite(red,HIGH);
        Serial.print("connecting to ");
        Serial.println(host);
        const int httpPort = 80;
        if (!wifiClient.connect(host, httpPort)) {
          Serial.println("connection failed");
          return;
        }
          String url = "/trigger/your_dead/with/key/";
          url += apiKey;

          Serial.print("Requesting URL: ");
          Serial.println(url);
          wifiClient.print(String("POST ") + url + " HTTP/1.1\r\n" +
                     "Host: " + host + "\r\n" + 
                     "Content-Type: application/x-www-form-urlencoded\r\n" + 
                     "Content-Length: 13\r\n\r\n" +
                     "value1=" + your_dead + "\r\n");
      }
      else {
       Serial.println("failed to send hreyfing");
        if (!client.connected()) {
          connect_MQTT();
        }
      }
    }else{
      Serial.println("No motion detected");
    }
  }

}


void setup() {
  // begin serial port
  connect_MQTT();
  Serial.begin (115200);

  // pir_pin
  pinMode(pirPin, INPUT);
  pinMode(red,OUTPUT);
  pinMode(green,OUTPUT);
  digitalWrite(red,LOW);
  digitalWrite(green,LOW);
  client.setCallback(callback);
  client.subscribe(GameOn);
}

void loop() {
  if (!client.connected()) {
    connect_MQTT();
    client.subscribe(GameOn);
  }

  // Call client.loop() to receive messages from the MQTT broker
  client.loop();
  
}
